[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "puntini-backend"
version = "0.1.0"
description = "Backend for Puntini - Business improvement project management system"
authors = [
    {name = "Puntini Team", email = "team@puntini.dev"}
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | logs
  | test_logs
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["."]
skip_glob = ["venv/*", "logs/*", "test_logs/*", "__pycache__/*"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "langgraph.*",
    "opentelemetry.*",
    "pytest.*",
    "pytest_asyncio.*",
]
ignore_missing_imports = true

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "Q",  # flake8-quotes
    "S",  # flake8-bandit
    "T20", # flake8-print
    "RET", # flake8-return
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "T20",    # print statements (allow in some contexts)
]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "S101",  # assert statements in tests
    "PLR2004", # magic values in tests
    "ARG001", # unused function args in test fixtures
    "S106",  # hardcoded password in tests
]

[tool.ruff.isort]
known-first-party = ["api", "config", "models", "graphstore", "agent"]

# Pylint configuration
[tool.pylint.messages_control]
disable = [
    "C0114", # missing-module-docstring
    "C0116", # missing-function-docstring
    "R0903", # too-few-public-methods
    "R0913", # too-many-arguments
    "W0613", # unused-argument
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 7
max-locals = 20
max-returns = 6
max-branches = 15
max-statements = 60

# Bandit security linter
[tool.bandit]
exclude_dirs = ["tests", "venv", "logs", "test_logs"]
skips = ["B101", "B601"]  # Skip assert_used and shell=True

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "venv/*",
    "tests/*",
    "logs/*",
    "test_logs/*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
